generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  scan      Int      @default(0)
  published Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  updateAt  DateTime @default(now())
}

model Nav {
  key      String  @id @default(cuid())
  label    String
  type     String
  navType  Int
  sort     Int
  icon     String?
  parentId String
  link     Links[]
  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?
}

model Links {
  id       String  @id @default(cuid())
  link     String
  name     String
  desc     String
  scan     Int     @default(0)
  type     String
  icon     String?
  userName String?
  password String?
  hot      Boolean
  navId    String
  updateAt String
  nav      Nav     @relation(fields: [navId], references: [key])
  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?
}

model Like {
  id         String  @id @default(cuid())
  author     User?   @relation(fields: [authorId], references: [id])
  authorId   String?
  relegation String
  type       String
}

model Comments {
  id          String  @id @default(cuid())
  userName    String
  userAvatar  String
  content     String
  updateAt    String
  replyId     String?
  replyUser   String?
  replyAvatar String?
  relegation  String
  parentId    String  @default("0")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  role          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  Nav           Nav[]
  Links         Links[]
  Like          Like[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
